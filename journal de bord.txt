mercredi 4 mai :
debut TP4
la creation de MapTraces et HashMapTraces est faite, on implemente les fonctions necessaire, et apres test du code les performances sont indiquées en commentaires dans les classes.
Debut de la factorisation du code dans la nouvelle classe AbstractTraces, de nombreuses erreurs sont arrivées!
en effet nous avons eu des probleme dans la structure du code puisque nous reprenions l'argument list dans chacune des classes mais avec un type plus précis à chaques étages, ce n'etait cependant pas le cas car lors de a creation d'une linkedlistTraces par exemple, cet objet avait 3 attribut list, dont une LinkedList<Trace> une Collection<Trace> et une list de type Object et lors de l'instanciation d'une classe, seul 2 des attributs s'initialisaient, ainsi parfois le programme utilisait parfois la troisieme list non initialisée (a null donc) et renvoyait des erreurs, nous avons donc laissé un seul attribut list. Notre erreur fut de penser que l'attribut list de la superclass etait cast en un type plus précis a l'instanciation et pas que la list etait créé a chaque niveau dans l'heritage.
probleme résolu.
La fonction iterator() a necessité un certain temps de comprehension pour pouvoir la coder en general dans l'architecture de la AbstractTraces.

creation du git pour le projet le 10 mai 2016

vendredi 13 mai :

debut du tp5
comprehension du fonctionnement du dictionnaire grace a arteoz
creation de la structure de TreeTraces et de Node avec getter et setter pour Node
TreeTraces reutilise une bonne partie des fonction de abstractTraces, la factorisation du code est payante dans le TP4.


samedi 14 mai :

Apres avoir implementer la fonction ajouter qui doit creer une chemin dans l'arbre avec les lettres données ou bien parcourir le chemin existant, il a fallut s'attacher a savoir comment parcourir l'arbre, donc le choix fut recursif grace a des fonctions dans Node tel que getFamily() qui renvoie une ArrayList<Node> et donc tous les sous noeuds et les noeuds freres d'un noeud.
Un argument a ete rajouté dans Node qui est de type String et qui donne le nom complet du SSID a cette position si ce noeud contient effectivement une liste de Trace. Ceci est fait pour simplifier la recherche des ssid dans l'arbre
TreeTraces et Node ont été fini
QuizzCar a été commencé et est seulement une fonction main qui pose une série de question :
fichier de wifi,
fichier de gps, 
tolerance de perte entre 0 et 1, 
suggestion ou recherche?,
selon le cas il faut entrer un ssid partiel ou total, dans le cas total, la liste des Traces est affichée, dans le cas suggestion l'affichage montre les SSID de noms proches, la derniere lettre pouvant etre fausse augmentant la tolerance des ssid recherchés. puis l'utilisateur peut afficher toute les traces associées aux ssid proposés.
a la fin de ce choix, l'utilisateur peut decider de recommencer la recherche ou suggestion de SSID.

si l'utilisateur souhaite arreter (false a la question precedente) alors le programme termine.

une boucle est rajoutée dans les cas ou l'utilisateur fait une faute dans le choix qu'il fait : exemple : "rechrhce" a la place de "recherche" le programme redemande alors le choix fait.

